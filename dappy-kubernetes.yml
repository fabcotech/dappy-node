apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health {
            lameduck 5s
        }
        ready
        kubernetes cluster.local in-addr.arpa ip6.arpa {
            pods verified
            fallthrough in-addr.arpa ip6.arpa
            ttl 30
        }
        prometheus :9153
        forward . 1.1.1.1 1.1.1.2
        cache 30
        loop
        reload
        loadbalance
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs
  strategy: {}
  template:
    metadata:
      labels:
        app: nodejs
    spec:
      containers:
        - image: fabcotech/dappy-node:2.4
          name: nodejs
          env:
            - name: CACHING
              value: '30'
            - name: CRON_JOBS_NAMES_MODULO
              value: '0'
            - name: DAPPY_NETWORK
              value: gammanetwork
            - name: LAST_BLOCK_JOB_INTERVAL
              value: '40000'
            - name: RCHAIN_NAMES_CONTRACT_ID
              value: dappynamesystemtestnet
            - name: RCHAIN_NAMES_MASTER_REGISTRY_URI
              value: mpddrwyph33qikosct81pbgkb11td4qrzub4najkfs63skn3fr1di8
            - name: RCHAIN_NETWORK
              value: testnet210604
            - name: REDIS_DB
              value: '1'
            - name: VALIDATOR
              value: https://node2.testnet.rchain.coop
          ports:
            - containerPort: 3001
            - containerPort: 3002
          resources:
            limits:
              memory: '128Mi'
              cpu: '500m'
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - image: redis
          name: redis
          resources:
            limits:
              memory: '128Mi'
              cpu: '500m'
          ports:
            - containerPort: 6379
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - image: fabcotech/dappy-nginx:13.4
          env:
            - name: DAPPY_NETWORK
              value: gammanetwork
            - name: RCHAIN_NETWORK
              value: 'testnet210604'
            - name: CLUSTER_DOMAIN_NAME
              value: 'dappy.tech'
          name: nginx
          volumeMounts:
            - mountPath: '/ssl'
              name: sslsecret
              readOnly: true
          resources:
            limits:
              memory: '512Mi'
              cpu: '500m'
          ports:
            - containerPort: 80
            - containerPort: 443
            - containerPort: 40400
            - containerPort: 40401
            - containerPort: 40403
            - containerPort: 40404
      volumes:
        - name: sslsecret
          secret:
            secretName: sslsecret
      restartPolicy: Always
status: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: aarnode
spec:
  serviceName: rnode
  replicas: 1
  selector:
    matchLabels:
      app: aarnode
  template:
    metadata:
      labels:
        app: aarnode
    spec:
      containers:
        - image: tgrospic/rnode:grpc-ssl-off
          name: aarnode
          env:
            - name: BOOTSTRAP
              value: 'rnode://4a92f5d858a9ef9e6bf6e0fc1974f28ee8b067f6@node2.testnet.rchain.coop?protocol=42400&discovery=42404'
            - name: RCHAIN_NETWORK
              value: 'testnet210604'
            - name: SHARD_NAME
              value: 'testnet2'
            - name: CLUSTER_DOMAIN_NAME
              value: 'dappy.tech'
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - mountPath: '/ssl'
              name: sslsecret
              readOnly: true
          command: ['/opt/docker/bin/rnode']
          args:
            [
              'run',
              '--bootstrap',
              '$(BOOTSTRAP)',
              '--network-id',
              '$(RCHAIN_NETWORK)',
              '--shard-name',
              '$(SHARD_NAME)',
              --host,
              '$(HOSTNAME).$(RCHAIN_NETWORK).$(CLUSTER_DOMAIN_NAME)',
              '--protocol-port',
              '40400',
              '--discovery-port',
              '40404',
              '--api-port-grpc-external',
              '40401',
              '--api-port-http',
              '40403',
              '--finalization-rate',
              '1',
              '--max-number-of-parents',
              '1',
              '--fault-tolerance-threshold',
              '-1',
              '--synchrony-constraint-threshold',
              '0.99',
              '--tls-certificate-path',
              '/ssl/rnode.crt',
              '--tls-key-path',
              '/ssl/rnode.key',
            ]
          ports:
            - containerPort: 40400
            - containerPort: 40401
            - containerPort: 40403
            - containerPort: 40404
          resources:
            limits:
              memory: '6Gi'
              cpu: '1800m'
            requests:
              memory: '5Gi'
              cpu: '1400m'
      volumes:
        - name: sslsecret
          secret:
            secretName: sslsecret
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs
spec:
  type: ClusterIP
  selector:
    app: nodejs
  ports:
    - port: 3001
      name: '3001'
      targetPort: 3001
    - port: 3002
      name: '3002'
      targetPort: 3002
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
    - port: 6379
      name: 'redis'
      targetPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: rnode
spec:
  type: ClusterIP
  selector:
    app: aarnode
  ports:
    - port: 40400
      name: '40400'
      targetPort: 40400
    - port: 40401
      name: '40401'
      targetPort: 40401
    - port: 40403
      name: '40403'
      targetPort: 40403
    - port: 40404
      name: '40404'
      targetPort: 40404
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: LoadBalancer
  loadBalancerIP: 195.154.71.146
  selector:
    app: nginx
  externalTrafficPolicy: Local
  ports:
    - port: 80
      name: 'http'
      targetPort: 80
    - port: 443
      name: 'https'
      targetPort: 443
    - port: 40400
      name: '40400'
      targetPort: 40400
    - port: 40401
      name: '40401'
      targetPort: 40401
    - port: 40403
      name: '40403'
      targetPort: 40403
    - port: 40404
      name: '40404'
      targetPort: 40404
